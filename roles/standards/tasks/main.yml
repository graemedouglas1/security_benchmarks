---

# Gather distribution info of system
- name: Gather distribution info
  setup:
    gather_subset: distribution,!all,!min
  when:
    - ansible_distribution is not defined
  tags: [ 'always' ]

# Check osversion and family meets critera for this role
- name: Check osversion and family
  assert:
    that:
      - ansible_os_family == 'Windows'
      - ansible_distribution | regex_search('Microsoft Windows Server (2016|2019)')
    success_msg: "{{ ansible_distribution }} {{ ansible_distribution_major_version }} is the detected operating system."
    fail_msg: "This role can only be run against Windows Server (2016|2019) Editions. {{ ansible_distribution }} {{ ansible_distribution_major_version }} is not supported."
  tags: [ 'always' ]

# Check osversion and family meets critera for this role
- name: Check ansible version
  assert:
    that: ansible_version.full is version_compare(min_ansible_version, '>=')
    msg: You must use Ansible {{ min_ansible_version }} or greater
  tags: [ 'always' ]

# Create all facts required as part of this playbook
- name: Include required facts
  include_tasks:
    file: 'facts.yml'

# Import standards based on location & OS_version
- name: Import standards for OS Build
  include_vars:
    file: vars/data/{{ os_version }}.yml
    name: standards

- debug:
    msg: "{{ standards }}"


# Apply all security policies relating to server role
- name: "Apply Security Policies" 
  win_security_policy:
    section: 'System Access'
    key: "{{ item.value.properties.key }}"
    value: "{{ item.value.properties.value }}"
  when:
    - item.value.enabled
    - server_role in item.value.role
  tags: item.value.tags
  loop: "{{ standards | dict2items | selectattr('value.module','eq','System Access') | list }}"
  loop_control:
    label: "{{ item.value.name }}"
    index_var: my_idx

# Apply all user rights relating to server role
- name: "Apply User Rights" 
  win_user_right:
    name: "{{ item.value.properties.name }}"
    users: "{{ item.value.properties.users }}"
    action: "{{ item.value.properties.action }}"
  when:
    - item.value.enabled
    - server_role in item.value.role
  tags: item.value.tags
  loop: "{{ standards | dict2items | selectattr('value.module','eq','User Right') | list }}"
  loop_control:
    label: "{{ item.value.name }}"

# Apply all security registry keys relating to server role
- name: "Apply Registry Keys"
  win_regedit:
    path: "{{ item.value.properties.path }}"
    name: "{{ item.value.properties.name }}"
    data: "{{ item.value.properties.data }}"
    type: "{{ item.value.properties.type }}"
  when:
    - item.value.enabled
    - server_role in item.value.role
  tags: item.value.tags
  loop: "{{ standards | dict2items | selectattr('value.module','eq','registry') | list }}"
  loop_control:
    label: "{{ item.value.name }}"